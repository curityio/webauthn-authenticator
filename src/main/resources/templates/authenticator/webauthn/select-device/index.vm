#*
*  Copyright 2020 Curity AB
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*#

#define($_body)

#parse("fragments/spinner")

<div id="back-button" class="center py2 login-actions display-none">
    <a href="$_selectDeviceEndpoint" role="button">
        <i class="icon ion-refresh inlineicon"></i>#message(
        "Error, please choose another device")</a>
</div>

<form id="validationForm" action="$!_validationEndpoint" method="post" class="login-form hidden">
    <input type="hidden" name="id" id="id" />
    <input type="hidden" name="rawId" id="rawId" />
    <input type="hidden" name="authenticatorData" id="authenticatorData" />
    <input type="hidden" name="clientDataJSON" id="clientDataJSON" />
    <input type="hidden" name="signature" id="signature" />
    <input type="hidden" name="userHandle" id="userHandle" />
    <input type="hidden" name="type" id="type" />
</form>

<script $!nonceAttr>

    const _credentialId = Uint8Array.from(atob("$!_credentialId"), c => c.charCodeAt(0));
    const _challenge = Uint8Array.from("$!_challenge", c => c.charCodeAt(0));

    navigator.credentials.get({
        publicKey : {
            userVerification: "$!_userVerification",
            timeout: $_timeout,
            allowCredentials: [{
                id: _credentialId,
                type: 'public-key'
            }],
            challenge: _challenge
        }
    })
    .then((newCredentialInfo) => {
        console.log('SUCCESS', newCredentialInfo);

        $("#id").val(newCredentialInfo.id);
        $("#rawId").val(bufferToBase64EncodedString(newCredentialInfo.rawId));
        $("#authenticatorData").val(bufferToBase64EncodedString(newCredentialInfo.response.authenticatorData));
        $("#clientDataJSON").val(bufferToBase64EncodedString(newCredentialInfo.response.clientDataJSON));
        $("#signature").val(bufferToBase64EncodedString(newCredentialInfo.response.signature));
        $("#userHandle").val(bufferToBase64EncodedString(newCredentialInfo.response.userHandle));
        $("#type").val(newCredentialInfo.type);

        $("#validationForm").submit();
    })
    .catch((error) => {
        console.log('FAIL', error);
        $(".waiting-spinner").hide();
        $("#back-button").removeClass("display-none");
    });

    function bufferToBase64EncodedString(bin) {
        return btoa(new Uint8Array(bin).reduce(
                (s, byte) => s + String.fromCharCode(byte), ''
        ));
    }

</script>
#end

#parse("layouts/default")
